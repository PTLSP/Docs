{"/_index-%E5%89%AF%E6%9C%AC/":{"data":{"":" 为爱⚡️发电 PTLSPの文档 由 Markdown 和 Hugo 驱动 极速且全能的 Hugo 主题框架 为构建现代化的静态网站而生 快速入门️ 快速且功能全面 简单易用，功能强大丰富。\nMarkdown 写作 只需使用 Markdown 进行编辑。多样的 Shortcode 组件开箱即用。\n全文搜索 内置 FlexSearch 全文搜索，无需额外设置。\n轻如羽毛 使用 Hextra 无需依赖 Node.js。由 Hugo 提供支持，Hugo 是最快的静态网站生成器之一，只需一个二进制文件即可在数秒内创建网站。\n响应式布局，暗黑模式 适应不同的屏幕尺寸。内置暗黑模式支持，并根据用户的系统偏好自动切换。\n免费构建和托管 使用 GitHub Actions 进行构建，并在 GitHub Pages 上免费托管。也可以托管在任何静态托管服务上。\n多语言轻松实现 仅需通过在 Markdown 文件后添加语言代码即可创建多语言页面。向您的站点添加 i18n 支持直观易行。\n还有更多... 代码高亮 / 目录 / SEO / RSS / LaTeX 公式 / Mermaid 图标 / 自定义 / 等等…"},"title":"Hextra 主题"},"/about/":{"data":{"":"Hextra 是一款简洁、快速、灵活的主题，适用于构建现代化静态站点。Hextra 特别适用于文档网站，但也可用于构建博客、个人网站等各种类型的网站。\nHugo 和 Jekyll 类似，是一个静态网站生成器。但与其他生成器不同，Hugo 只有单个可执行文件，这使得它可以轻松地在各种平台上安装和运行。Hugo 的运行速度非常快且可靠性高，能够在几毫秒内渲染数千页的网站。\nHextra 被设计为轻量级，具有最小化的内存占用。使用 Hextra 无需安装繁杂的依赖，比如 Node.js；相反，你只需要一个简单的 YAML 配置文件和 Markdown 内容。因此，我们可以专注于内容而非在配置环境上浪费精力。","鸣谢#鸣谢":"Hextra 的设计离不开这些项目的支持和其提供的灵感：\nHugo Tailwind CSS Heroicons Nextra Next.js "},"title":"关于"},"/blog/%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/":{"data":{"":"","引用-note#引用 note":"原创教程地址：https://akilar.top/posts/615e2dec/\n以下为自己练手学习的记录\n行内文本样式 text {% tabs %}\n{% u 文本内容 %} {% emp 文本内容 %} {% wavy 文本内容 %} {% del 文本内容 %} {% kbd 文本内容 %} {% psw 文本内容 %} 带 {% u 下划线 %} 的文本 带 {% emp 着重号 %} 的文本 带 {% wavy 波浪线 %} 的文本 带 {% del 删除线 %} 的文本 键盘样式的文本 {% kbd command %} + {% kbd D %} 密码样式的文本：{% psw 这里没有验证码 %} 1. 带 {% u 下划线 %} 的文本 2. 带 {% emp 着重号 %} 的文本 3. 带 {% wavy 波浪线 %} 的文本 4. 带 {% del 删除线 %} 的文本 5. 键盘样式的文本 {% kbd command %} + {% kbd D %} 6. 密码样式的文本：{% psw 这里没有验证码 %} {% endtabs %}\n行内文本 span {% tabs %}\n{% span 样式参数(参数以空格划分), 文本内容 %} 字体: logo, code 颜色: red,yellow,green,cyan,blue,gray 大小: small, h4, h3, h2, h1, large, huge, ultra 对齐方向: left, center, right\n彩色文字 在一段话中方便插入各种颜色的标签，包括：{% span red, 红色 %}、{% span yellow, 黄色 %}、{% span green, 绿色 %}、{% span cyan, 青色 %}、{% span blue, 蓝色 %}、{% span gray, 灰色 %}。 超大号文字 文档「开始」页面中的标题部分就是超大号文字。 {% span center logo large, Volantis %} {% span center small, A Wonderful Theme for Hexo %} - 彩色文字 在一段话中方便插入各种颜色的标签，包括：{% span red, 红色 %}、{% span yellow, 黄色 %}、{% span green, 绿色 %}、{% span cyan, 青色 %}、{% span blue, 蓝色 %}、{% span gray, 灰色 %}。 - 超大号文字 文档「开始」页面中的标题部分就是超大号文字。 {% span center logo large, Volantis %} {% span center small, A Wonderful Theme for Hexo %} {% endtabs %}\n引用 note {% tabs %}\nnote: # Note tag style values: # - simple bs-callout old alert style. Default. # - modern bs-callout new (v2-v3) alert style. # - flat flat callout style with background, like on Mozilla or StackOverflow. # - disabled disable all CSS styles import of note tag. style: simple icons: false border_radius: 3 # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6). # Offset also applied to label tag variables. This option can work with disabled note tag. light_bg_offset: 0 带 {% u 下划线 %} 的文本 带 {% emp 着重号 %} 的文本 带 {% wavy 波浪线 %} 的文本 带 {% del 删除线 %} 的文本 键盘样式的文本 {% kbd command %} + {% kbd D %} 密码样式的文本：{% psw 这里没有验证码 %} 1. 带 {% u 下划线 %} 的文本 2. 带 {% emp 着重号 %} 的文本 3. 带 {% wavy 波浪线 %} 的文本 4. 带 {% del 删除线 %} 的文本 5. 键盘样式的文本 {% kbd command %} + {% kbd D %} 6. 密码样式的文本：{% psw 这里没有验证码 %} {% endtabs %}","行内文本-span#行内文本 span":"","行内文本样式-text#行内文本样式 text":""},"title":"外挂标签"},"/blog/2024-01-16.nas%E5%8F%8D%E4%BB%A3%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%8F%AA%E9%9C%80%E4%B8%80%E4%B8%AA%E7%AB%AF%E5%8F%A3%E5%B0%B1%E5%A4%9F%E5%95%A6/":{"data":{"":"{% note pink ‘fas fa-car-crash’ modern %}来不及解释了 系好安全带 快上车！！！{% endnote %}\n{% progress 10 red 进度10％ %}","cloudflare获取api#CloudFlare获取API":"{% tip warning faa-horizontal animated-hover %}API获取好了复制发微信或记事本里存着 以后长期都需要用到。{% endtip %}\n{% progress 50 green 进度50％ %}","准备事项#准备事项":" Docker环境 （不管你是什么nas软路由都有这玩意吧 咱们需要的工具很简单 直接docker命令安装） CloudFlare账号 （我们是要开ssl的！必须用这个 {% del 毕竟泛域名15年免续签 你域名过期了 证书都不会过期 %} 阿里云用户把dns解析转到cf谢谢 ） （暂时可以了解一下 源证书目前不适用本教程 因为CloudFlare的自签证书不开小云朵不给用） {% link 注册CloudFlare账号, https://dash.cloudflare.com/sign-up, https://www.vectorlogo.zone/logos/cloudflare/cloudflare-icon.svg %} 公网V4或开启IPV6 （V6用户需要另一端也开启V6地址才能访问 手机流量已经普及 你公司网络可不一定哦~） 安装DDNS-Go （不要用爱快自带的 不要问我为什么 必须用这个！！！！） 安装NginxProxyManager （简称NPM 咱们就靠这个来反代 这工具简单还稳定 nginx也行 但我觉得对新人来说没这么方便） ","安装ddns-go#安装DDNS-GO":" ddnsgo文档参考：https://gitee.com/yuanly/Jeessy-DDNS-GO 不想麻烦这一步 群晖是有套件版本的 直接装 这一段不用看了 笑死 Linux一键安装命令 Linux系统默认安装到opt目录 直接复制粘贴到你Linux的终端里运行即可\ndocker run -d --name ddns-go --restart=always --net=host -v /opt/ddns-go:/root jeessy/ddns-go 群晖一键安装命令 本文全程按照群晖Nas示范 所以你需要把安装命令里的路径给替换掉 /opt/ddns-go 更换成 /volume1/docker/ddnsgo 如果你跟我一样的习惯 可以直接调用以下命令 docker run -d --name ddns-go --restart=always --net=host -v /volume1/docker/ddnsgo:/root jeessy/ddns-go 群晖Nas安装教程 ps：\n我不确定群晖是否会自动给你创建文件夹（已确定会自动创建文件夹） {% del 为了一次性成功不报错 请先去docker文件夹下创建ddnsgo的文件夹 %} 计划任务运行后不要急着删除 其实可以一直留着 方便以后再次命令安装docker或执行其他需要用到root的命令 就算他重启后自动再次运行一遍 只要你没有删除那个容器 不会有任何问题 一样正常使用的 不放心再删掉 ","安装nginxproxymanager#安装NginxProxyManager":"按照上面安装ddnsgo的方法 再次安装npm 所以那个创建好的计划任务别急着删！！！这里复制好粘贴进去\n这个我就不提供Linux默认安装的命令 我来解释每一行的参数代表什么意思 Linux用户只需要根据我对各个参数的解释 你自己想怎么改就怎么改就行了\nNas用户必须给我理解下面啥意思 我会逐条解释 我就不信你懂不了！\ndocker run -d \\ --name nginxmanager \\ -p 8080:80 \\ -p 81:81 \\ -p 888:443 \\ -v /volume1/docker/npm:/data \\ -v /volume1/docker/npm:/etc/letsencrypt \\ --restart=always \\ jc21/nginx-proxy-manager 当您运行上述的Docker命令时，每一行的含义如下： docker run -d: 运行一个新的容器。 --name nginxmanager: 指定容器的名称为 “nginxmanager”。 -p 8080:80: 将主机上的端口8080映射到容器内的80端口。这样，您可以通过 http://localhost:8080 访问NginxProxyManager的HTTP端口。 -p 81:81: 将主机上的端口81映射到容器内的81端口。这样，您可以通过 http://localhost:81 访问NginxProxyManager的后台管理界面。 -p 888:443: 将主机上的端口888映射到容器内的443端口。这样，您可以通过 https://localhost:888 访问NginxProxyManager的HTTPS端口。 -v /volume1/docker/npm:/data: 将主机上的目录 /volume1/docker/npm 映射到容器内的 /data 目录。这样，您可以在主机上持久化存储NginxProxyManager的数据。 -v /volume1/docker/npm:/etc/letsencrypt: 将主机上的目录 /volume1/docker/npm 映射到容器内的 /etc/letsencrypt 目录。这样，您可以在主机上持久化存储NginxProxyManager的证书。 --restart=always: 设置容器在启动时自动重启。 jc21/nginx-proxy-manager: 使用镜像 jc21/nginx-proxy-manager 来创建容器。 重点就是映射路径需要改到你群晖对应的存储空间 我是拿默认的存储空间1（/volume1）放置docker 大部分人其实照抄就完事了 有的人docker的共享文件夹不在存储空间1上 你就直接改数字就完事了 后面的保持不动就完事了\n然后就是我把http的端口改到了8080 https端口改到了888 来应对80跟443端口都被封掉了情况 这样我们直接把nas的ip的8080 888端口对应的转发到公网就完事了 还不懂我要杀人了！！！","思路分析#思路分析":"我太清楚把玩软路由跟Nas的朋友想要体验到什么样的效果了 奈何网上教程杂乱无章 大多都写得很烂 没有一个靠谱的大佬指导 期间会踩很多坑 那种无助的感觉 在我这不会存在了\n此教程将带领新手抓住每一个细节 学会家用Nas或软路由反代内网服务 类似于qB TR这样的下载器 又或者Emby Plex这样的影视媒体库 又或者爱快 群晖 MoviePilot的后台等等 我要教会大家的就是怎么样给这些服务 每一个都安排一个二级域名 类似于\nqb的:qb.xxx.com:888 emby的:emby.xxx.com:888\n但众所周知的是 家宽的80 443端口均为封禁状态 我们没法直接调用 只能在这些域名后面手动添加其他的端口才能访问 但一个域名转发映射不同的端口又难记住 所以很多人都有一个想法 给他们安排一个专属的二级域名 然后统一不变但又可用的端口 类似888 不就行了嘛 是的 这方法非常可行！此教程就会带领大家手把手学废 从家宽v4或v6 ddns到Cloudflare开始！","最后测试#最后测试":" 以上都做完了 默认cf不需要再改动什么操作了 域名加端口即可直接访问服务页面 至此 教程结束 感谢观看。 {% progress 100 gray 进度100％ %}","路由器端口转发#路由器端口转发":"到了最后一步了 不管你是硬路由还是软路由 端口转发不需要我多教吧？\n把Nas的ip的http的端口 8080转到8080 https的端口888 转发到888 到了这一步 都知道443 80的内网端口也是可以转成任意端口的 但还是那句话 为了严谨长期保持稳定 避免未知服务抢占80 443端口 群晖的webstation就是会这样干的。。。所以不要来质疑我为啥这样教大家 咱们开启域名访问的好处也不止是方便访问 而是开启ssl！https没有烦人的警告了也更安全。","配置nginxproxymanager#配置NginxProxyManager":"装好后点开面板即可查看这个容器创建好并自动运行了 打开你Nas的ip+81端口即可访问面板后台\n默认账号admin@example.com，密码：changeme 登陆上去了会强制改邮箱跟密码 按照提示改就好\n教程都快写完了发现CloudFlare的15年自签证书翻车了 那证书不开小云朵不给你用的 emby nas这种套了cf的cdn还能用啊 卡得一批 被我紧急取消了 那个大家可以了解性的学习下 我暂时不提供更高级别的教程 影响不好 想学可以去别处 我们还是根据网上的传统教程申请\n申请 Let’s Encrypt 三个月的证书\n接下来我们就可以开始反代内网服务到公网了 举例我的qb地址为：http://192.168.31.1:8080\n截图IP打错了不要在意这些细节 到这就结束了 其他反代内容根据这一举例 自行添加。 "},"title":"反代教程之内网服务拥有自己的专属域名"},"/blog/2024-01-22.macos%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8Fv2rayu.app%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/":{"data":{"":"终端运行以下命令即可\nsudo xattr -r -d com.apple.quarantine /Applications/V2rayU.app "},"title":"“V2rayU.app”无法打开的解决方法"},"/blog/2024-01-24.unraid%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E5%96%9C%E6%AC%A2%E7%9A%84%E7%9A%AE%E8%82%A4/":{"data":{"":"","下载主题文件#下载主题文件":"下载：Unraid美化包.zip 创建共享文件夹 美化包移动到theme 打开共享文件夹theme 开启SMB共享 把下载好的文件全部移动到theme 在应用里面安装 Theme Engine 插件 在设置里面找到 Theme Engine 打开 在 Base Theme 里面选择Black主题并应用 在 Theme Setting 打开 Advanced VIEW Enable Theme Engine 修改为NO Enable custom styling (below) 改为 yes Custom styling (advanced)填入以下代码 \u003c/style\u003e \u003clink type=\"text/css\" rel=\"Stylesheet\" href=\"/mnt/user/theme/theme.css\" /\u003e 参考图片参数 确认无误后保存 ","大功告成#大功告成！":"因为这个很简单 所以我就没有把皮肤取下做教程"},"title":"Unraid主题美化 打造自己喜欢的皮肤！"},"/blog/2024-01-24.virtio-fs%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%BC%8F%E6%B5%8B%E9%80%9F%E8%AE%B0%E5%BD%95/":{"data":{"":"","测试环境#测试环境":"测试环境 测试宿主：Unraid\n测试系统：Windows11虚拟机","测试记录#测试记录":" M2机械Sata混合在一起的盘： （也就是Unraid全盘映射） Unraid共享模式指定单盘 Pcie4.0 M2 固态测试\n结论：网上关于这个的信息太少了 这就是VirtIO-FS速度的极限了？测试下来只能跑这么快 虽然这种方法 大大的降低了cpu的占用 但速度确实太拉垮了 完全没符合预期 不清楚是不是我管理口是千兆 然后虚拟机也是虚拟网卡的原因 但是虚拟网卡走smb协议 传输最高都能达到400MB 只有等后续上了万兆网卡 虚拟万兆直通再试试看…"},"title":"VirtIO-FS 共享模式测速记录"},"/blog/2024-01-27.%E5%AE%9D%E5%A1%94%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%B7%AF%E5%BE%84%E6%96%87%E4%BB%B6url/":{"data":{"":"","利用脚本获取文件夹路径并指定网址前缀#利用脚本获取文件夹路径并指定网址前缀":"要实现批量获取 random 路径下文件的路径，并在路径前面加上网址 https://xxx.xxx.com ，您可以使用以下脚本来实现：\n#!/bin/bash base_url=\"https://xxx.xxx.com/random/\" # 网址前缀 directory=\"/www/wwwroot/xxx.xxx.com/random\" # random 路径 output_file=\"/www/wwwroot/xxx.xxx.com/random.txt\" # 输出文件名 # 遍历目录下的文件 for file in \"$directory\"/*; do if [ -f \"$file\" ]; then # 只处理文件，不处理目录 filename=$(basename \"$file\") # 获取文件名 url=\"$base_url$filename\" # 构建完整的 URL echo \"$url\" \u003e\u003e \"$output_file\" # 输出 URL到文件 fi done 请将上述脚本中的 /www/wwwroot/xxx.xxx.com/random 替换为您实际的路径。运行脚本后，它将遍历指定目录下的文件，并输出每个文件的完整 URL，其中网址前缀为 https://xxx.xxx.com/。\n您可以将脚本保存为一个文件（例如 get_random_urls.sh），并在终端中运行以下命令来执行脚本：\nbash get_random_urls.sh 脚本将输出每个文件的 URL，您可以将输出保存到文件中或按需进行进一步处理。\n{% tip warning faa-parent animated-hover %}请注意，脚本假设 random 路径下只包含文件，不包含子目录！所以请单独分类，以上举例请根据实际情况修改。\n{% endtip %}\n成功把random文件夹下的图片路径批量获取URL写入到random.txt文件 F12已经能够获取到图片的真实路径了 ![](/img/截屏2024-01-28 上午1.16.35.png)\n没写完没写完没写完！！！！！没写完没写完没写完！！！！！没写完没写完没写完！！！！！","前言#前言":"我之前做了一个二次元随机图嘛：\n![](/img/截屏2024-01-28 上午1.19.39.png)\nrandom.php 直接指向random文件夹下的图片 源码如下：\n\u003c?php // 指定图片目录的相对路径 $img_dir = 'random/'; // 获取符合条件的图片列表 $img_list = glob($img_dir . '*.{gif,jpg,png,webp}', GLOB_BRACE); // 如果图片列表不为空，则随机选择一张图片并输出 if (!empty($img_list)) { $img_url = $img_list[array_rand($img_list)]; // 获取图片类型 $img_info = getimagesize($img_url); if ($img_info !== false) { $img_mime = $img_info['mime']; header('Content-Type: ' . $img_mime); // 设置输出的内容类型为图片的 MIME 类型 readfile($img_url); exit; } else { echo 'Failed to determine the image type.'; } } else { // 如果图片列表为空，则输出错误信息 echo 'No images found in ' . $img_dir; } ?\u003e Nginx的伪静态配置如下：\nlocation /random { rewrite ^/random$ /random.php last; } location /cover { rewrite ^/random$ /cover.php last; } location /gif { rewrite ^/random$ /gif.php last; } location /4k { rewrite ^/random$ /4k.php last; } location /mp { rewrite ^/random$ /mp.php last; } 目的是为了获取随机图接口地址固定为：\nhttps://xxx.xxx.com/random\n指向的实际路径为:https://xxx.xxx.com/random.php\n这样能解决某些框架获取不到.php路径 采取的解决办法\n效果自然是非常ok 但有个问题就是 虽然路径固定了 random路径下的文件也确实被cloudflare缓存了 但我不确定是不是我单独打开图片真实路径那一刻才缓存上的","发现问题点并尝试优化#发现问题点并尝试优化":"监控网站源服务器发现上传的流量还是不少 所以就很怀疑是不是没被cf缓存上 每次都从源服务器获取图片 而且random这个接口是获取不到原图片文件夹下的真实路径的 如果用户访问你的博客 非常喜欢这个图 想扒会非常困难 而且也不方便随时调用其他url地址的图片\n而我在制作随机图前就知道了php源码是可以通过调用txt文本里面url来实现跳转到图片url或直接调用本地目录图片的url的\n我也早就发现有大佬把图片传到gitee仓库 用我这个教程的方法来批量获取图片路径 用跳转的方式来打开图片 那速度嘎嘎快 比cf的cdn快得多！而且还不占用服务器存储！！！\n想法有了 可行性也具备了 就差实际行动！接下来就是具体实现教程！"},"title":"批量获取当前路径文件URL"},"/blog/2024-01-30.%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%BE%AE%E5%8D%9A%E5%B0%8F%E5%A7%90%E5%A7%90%E7%9A%84%E7%85%A7%E7%89%87%E5%92%8C%E8%A7%86%E9%A2%91/":{"data":{"":"{% tip home %}gallery-dl 是一款开源命令行工具 它能够从多达 1400+ 个网站批量下载图片与合集 常见有微博、500px、unsplash、imgur 等网站 有一种图片版 youtube-dl 的感觉。{% endtip %}\ngallery-dl 项目仓库： https://github.com/mikf/gallery-dl/\n参看教程： https://sand.litofu.com/download-Weibo-album-with-gallery-dl/","安装命令#安装命令":"安装gallery-dl：\nchoco install gallery-dl 获取页面能用的变量：\ngallery-dl -K \"博主的微博地址\" ","成功示例#成功示例":"","注意事项#注意事项":"教程里说的下载后文件名乱七八糟 其实是你没有一开始就设置好字符串\n千万不要先随便下载后再批量改名 他会重新下一遍的 已吃过亏。。\n还有就是参考博主的规则不太符合我的需求 所以我做了如下改动：\ngallery-dl -f \"{status['user']['screen_name']}_{status[date]}_{num}.{extension}\" \"https://weibo.com/u/6965299684\" 命名规则：微博昵称-年月日-多幅图序号.扩展名 ","画廊展示#画廊展示":"{% sitegroup %}\n{% site Lian, url=https://gallery.ptlsp.com/, screenshot=/img/Lian_2024-01-30_07-43.png, avatar=/avatar.gif, description=Lianの画廊 %}\n{% endsitegroup %}","解释声明#解释声明":"{% tip warning faa-horizontal animated-hover %}批量下载的小姐姐都是个人刷微博或抖音偶然发现 或是喜欢了很久的明星 始于颜值 忠于人品 个人才艺 唱歌跳舞都是我欣赏并关注的原因 其中包括非公众人物 如小姐姐本人看到觉得不适 请立即联系我下架删除 对此打扰 提前说声抱歉！{% endtip %}"},"title":"微博批量下载小姐姐的照片和视频"},"/blog/2024-01-30.hexo%E5%8D%9A%E5%AE%A2%E6%8D%A2%E5%8F%B0%E7%94%B5%E8%84%91%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D/":{"data":{"":"安装npm git这些环境后\nGithub拉到本地目录\n在博客目录 终端打开运行\nnpm install hexo --save "},"title":"Hexo博客换台电脑如何恢复"},"/blog/2024-02-01-moviepilot%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81%E4%B9%8B%E6%96%B0%E6%89%8B%E5%96%82%E9%A5%AD%E6%95%99%E7%A8%8B/":{"data":{"":"","教学指引#教学指引":"期间参考：\nhttps://pt-helper.notion.site/50a7b44e255d40109bd7ad474abfeba5\nhttps://github.com/Putarku/MoviePilot-Help?tab=readme-ov-file#%E5%BE%AE%E4%BF%A1%E9%80%9A%E7%9F%A5%E9%97%AE%E9%A2%98\n大家点进去看 了解各个信息 代表什么意思 网上教程已经很详细了 基础的我就不再过多的重述 直接看我的截图 找到以下几个关键点 我用数字代表各个参数 大家理解起来事半功倍\n以下为windows的配置文件参数 docker用户无需担心 对号入座进群晖docker 其实是一样的 主要就是这几个环境变量 别害怕 我会带领大家一步一步的操作并理解。","服务声明#服务声明":"{% tip ban faa-parent animated-hover %}不允许任何技术大佬利用此免费服务售卖技术！此教程不允许转载到国内任何公共平台 ！服务完全免费！仅供学习参考！\n{% endtip %}\n截止到2024.2.1 我未更新系统 依旧有效 如有问题 及时反馈！\nGithub服务地址：https://github.com/PTLSP/MoviePilot-Wechat-PROXY","注意事项#注意事项":"期间tg用户反馈 跟着我的教程使用 http://ip:端口/api/v1/message/?token=moviepilot 这个接口导致MP开机即死机 连日志都看不到 他的环境为：群晖6.2 Docker 在我的建议下 他使用官方提供的第二个接口地址就成功了 所以我之前的教程也明说了 未知bug我也不懂 这两换着来 不要纠结！\nhttp://ip:端口/api/v1/message/?token=moviepilot http://ip:端口/api/v1/message/ 切记二选一！！！！\n官方解释 填写可信IP 148.135.46.230 自此 教程结束 完成以上步骤基本没问题了\nMP系统版本参考：","配置变量#配置变量":" WeChat企业ID WECHAT_CORPID=①\nWeChat应用Secret WECHAT_APP_SECRET=②\nWeChat应用ID WECHAT_APP_ID=③\nWeChat代理服务器 WECHAT_PROXY=④\nWeChat Token WECHAT_TOKEN=⑤\nWeChat EncodingAESKey WECHAT_ENCODING_AESKEY=⑥\n# WeChat企业ID # WeChat应用Secret 贴心附上MP的LOGO:\n# WeChat应用ID # WeChat代理服务器 我已经用我的vps搭建了代理服务器 并绑定了域名 大家直接调用就好\n微信代理地址：https://mp.ptlsp.com/\n企业微信应用后台的 企业可信IP：148.135.46.230\n微信代理地址我想要大家长期使用 所以不需要再去mp配置参数里去改微信代理地址了 我已经把ip绑定到域名上了 就算以后vps到期 或者这个v4固定公网失效了 我会继续采购vps 绑定微信到代理地址 让大家继续用 只需要登录企业微信更换企业可信ip 为最新的IP即可！\n避免期间大家翻车 我把细节交代清楚 看下面截图 准确填入！！！\nps：如果你是老版本 配置文件提示微信代理服务器最后面不需要添加 “/” 你都加不加都试一下嘛 这东西说不清楚 我参考网上教程看到别人是加上的 我也加上的 我没问题 不行都试试 这个是个排错点 参考起来\nWECHAT_TOKEN 跟 WeChat EncodingAESKey "},"title":"MoviePilot企业微信推送之新手喂饭教程"},"/blog/hello-world/":{"data":{"":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","quick-start#Quick Start":"Create a new post $ hexo new \"My New Post\" More info: Writing\nRun server $ hexo server More info: Server\nGenerate static files $ hexo generate More info: Generating\nDeploy to remote sites $ hexo deploy More info: Deployment"},"title":"Hello World"},"/blog/moviepilot%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-windows%E7%AF%87/":{"data":{"moviepilot新手入门教程-windows篇#MoviePilot新手入门教程 Windows篇":"MoviePilot新手入门教程 Windows篇"},"title":"MoviePilot新手入门教程 Windows篇"},"/blog/sftpgo/":{"data":{"":"","sftpgo映射文件夹#SFTPGO映射文件夹":"","sftpgo添加用户#SFTPGO添加用户":"","公网端口转发实现外网访问#公网端口转发实现外网访问":"在 Unraid 上安装 SFTPGo 登录到 Unraid 的 Web 界面。\n点击左侧导航栏中的 “Apps”（应用）选项。\n在 “Apps” 页面上，您可以搜索并找到 “SFTPGO” 应用程序。点击进入安装界面。 参数全部默认就好 配置完成后，点击 “Add”（添加）按钮创建容器。\nUnraid 将会下载并配置 SFTPGo 容器。您可以在 Docker 管理界面的容器列表中看到新创建的容器。\n启动 SFTPGo 容器，并等待一段时间，直到容器状态显示为 “Healthy”（正常）。\n现在，您可以使用注册的管理员账号连接上SFTPGo的管理后台，进行参数配置。 SFTPGO映射文件夹 第一步肯定是映射文件夹啦 新手需要注意的地方 就在/unraid这里 熟悉docker的老手自然懂 un应用下载的sftpgo已经给你把- 参数配置好了直接抄就是了 其他例如群晖的nas用户就按照这个参数配置就好了 docker里自然是走的- 是容器路径 这个你想怎么改就怎么改 主机路径你改成你想要映射的那个盘或者阵列池就好 比如我的Music路径在unraid里的/mnt/user/Music里 在这个界面就填写/unraid/Music\n其他文件映射你就在这个界面挨个添加就好了 添加完就完事了\n当然了你如果…\n不需要部署到公网进行远程访问\n不担心安全火葬场问题\n作为管理员内网自己用\n你可以直接映射/mnt/user/里所有的共享文件夹 像我这样设置： SFTPGO添加用户 点击➕添加用户 设置用户名和密码 其他全部默认 ps:上面映射文件夹的时候说的不够严谨 设置用户这边的文件夹名字才是最终连上sftp文件夹显示的名字 都可以随便改的 我只是把大伙的想法都考虑到了 正常思维 肯定还是音乐对音乐 软件对软件 但我提一嘴是想告诉大家这个容器的灵活性 我描述可能有问题 你只需要知道 你主机路径设置对了 不管是创建容器共享文件夹映射主机时 容器的共享文件夹可以自定义 在用户里也可以自定义就行了！脑子转不过弯的 就别想太多！一一对应就好！\nps：上面说的list是只读的意思也不严谨。。。应该是读取文件列表的意思 说的时候站在自己的角度考虑了 当你赋予上传跟删除等权限时 就不是只读了 所以正确意思为读取列表权限 但对于我这样只需要只读效果的 就按照我这样设置就好~\n公网端口转发实现外网访问 以上设置好了就可以点确认了\nSFTPGO这边的设置就完事了\n接下来我们要去路由器里的端口转发 把内网ip+端口转发到外网\n公网设置了ddns的 服务器地址肯定就是你的域名地址了~\n我的sftp的端口设置的是2022（可以在容器里修改） Windows这边我们用RaiDrive这个免费软件即可远程连接上Sftp服务器即可访问其中的文件夹\n以上就是我实现目的的经验 如果有疑问评论区提问就好\n忽略的很多细节 可以下面的大佬 直接把原理都研究出来了 我不想知道原理 多得也无需了解 我只需要满足我自己的需求就好了。\n参考文章：\nhttps://zhuanlan.zhihu.com/p/570104861\nhttps://post.smzdm.com/p/a60gd28g/","在-unraid-上安装-sftpgo#在 Unraid 上安装 SFTPGo":""},"title":"Unraid使用SFTPGO快速上手"},"/blog/test/":{"data":{"":"","bilibili视频适配#Bilibili视频适配":" 带 {% u 下划线 %} 的文本 带 {% emp 着重号 %} 的文本 带 {% wavy 波浪线 %} 的文本 带 {% del 删除线 %} 的文本 键盘样式的文本 {% kbd command %} + {% kbd D %} 密码样式的文本：{% psw 这里没有验证码 %} Bilibili视频适配 直接复制以下代码 插入到你的 md 文章就行 修改里面的 aid bvid为你视频的 AV号 BV号 即可。\n\u003cdiv align=center class=\"aspect-ratio\"\u003e \u003ciframe src=\"https://player.bilibili.com/player.html?bvid=1Lt4y1R7mR\u0026\u0026page=1\u0026as_wide=1\u0026high_quality=1\u0026danmaku=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" high_quality=1 danmaku=1 allowfullscreen=\"true\"\u003e \u003c/iframe\u003e \u003c/div\u003e ","视频展示#视频展示":" "},"title":"测试记录博客各项功能"},"/blog/unraidhexian/":{"data":{"":"我的大部分教程都是自己在网上学的 然后再结合自己的理解 精简掉繁琐难懂的过程 直接达成目的.","第一种方法#第一种方法":"开启核显 modprobe i915 检查核显开启状态 ls /dev/dri 成功驱动核显 设置开机启动项 cd /boot/config vi go 键盘输入 i 复制粘贴添加以下命令\nmodprobe i915 chmod -R 777 /dev/dri chown -R nobody:users /dev/dri esc键退出\n直接输入“:wq”","第二种方法#第二种方法":"打开u盘引导“Flash”的SMB共享 我们直接在 windows 上修改！\n打开路径：flash—config—go“ 用记事本打开\n复制粘贴开启开机自启的核显代码 modprobe i915 chmod -R 777 /dev/dri chown -R nobody:users /dev/dri 这样你每次开机核显都会开启了\n给Emby Jellyfin Plex docker添加核显设备 在流媒体软件的docker编辑页面添加设备\n/dev/dri 打开\n在流媒体软件的转码里即可看到设备已经添加成功\n教程结束。"},"title":"Unraid 开启核显 给Emby硬解 快速教程"},"/blog/vpscode/":{"data":{"":"","x-ui修改版一键脚本xray内核#x-ui修改版一键脚本（xray内核）":"Github地址：https://github.com/yonggekkk/x-ui-yg\nbash \u003c(wget -qO- https://gitlab.com/rwkgyg/x-ui-yg/raw/main/install.sh 2\u003e /dev/null) 或\nbash \u003c(curl -Ls https://gitlab.com/rwkgyg/x-ui-yg/raw/main/install.sh) ","一键查看解锁chatgtp命令#一键查看解锁Chatgtp命令":"bash \u003c(curl -Ls https://cdn.jsdelivr.net/gh/missuo/OpenAI-Checker/openai.sh) 宝塔面板Ubuntu/Deepin安装脚本\nwget -O install.sh https://download.bt.cn/install/install-ubuntu_6.0.sh \u0026\u0026 sudo bash install.sh ed8484bec ","查看linux-系统信息-网络带宽及硬盘读写速率#查看Linux 系统信息 网络带宽及硬盘读写速率":"官网：https://bench.sh/\nwget -qO- bench.sh | bash 或\ncurl -Lso- bench.sh | bash ","测试流媒体服务解锁状态#测试流媒体服务解锁状态":"Github：https://github.com/lmc999/RegionRestrictionCheck\n只检测IPv4结果：\nbash \u003c(curl -L -s check.unlock.media) -M 4 只检测IPv6结果：\nbash \u003c(curl -L -s check.unlock.media) -M 6 "},"title":"我的VPS常用命令（长期更新）"},"/docs/":{"data":{"":"👋 你好！欢迎来到 PTLSPの文档！","ptlsp-是什么#PTLSP 是什么？":"PTLSP（Protecting Tiny Little Stray Pets）是一个致力于保护小型流浪宠物的组织。他们致力于提供流浪宠物所需的庇护、医疗和关爱。这个小站点在资源和影响力方面不如大型组织，但他们的热情和奉献精神使他们成为宠物救助领域中的一股正能量。他们虽然规模较小，但通过不懈努力和社区支持，他们为流浪宠物带来了关爱和希望。。\n该平台的用户界面设计相对陈旧，功能也相对简单，缺乏许多其他社交平台常见的互动特性，如陪伴流浪宠物玩原神，一起下金铲铲之战棋的视频分享，这使得用户与宠物均没得到舒适的体验。\n其次，尽管声称连接全球宠物爱好者，但实际上该平台的用户数量稀少，活跃度低。这导致了信息更新速度慢，以及交流互动的质量不高。\n再者，PTLSP对于内容的审核和管理相对较弱，存在大量低质量、重复或无关的帖子，站内用户人均复读机，严重降低了正常用户使用的愉悦度。此外，平台上的信息真实性和可信度也难以保障。\n综上所述，虽然PTLSP有着特定的定位，站长也多次公开宣称“有的是实力” 但在用户体验、活跃度和内容质量等方面存在诸多不足，因此被认为是一个“没有实力的小站”。","功能特点#功能特点":" 优美的设计 - 受到 Nextra 的启发，Hextra 利用 Tailwind CSS 提供了一种现代设计，使您的网站看起来出色。 响应式布局和深色模式 - 无论是在移动设备、平板还是桌面上，都表现出色。同时支持深色模式以适应各种光线条件。 快速和轻量级 - 由 Hugo 驱动，一个轻量级且超快的静态网站生成器，封装在一个单一的二进制文件中，Hextra 保持其占用极小。使用它不需要 Javascript 或 Node.js。 全文搜索 - 内置的离线全文搜索由 FlexSearch 提供支持，无需额外配置。 功能全面 - 支持 Markdown、语法高亮、LaTeX 数学公式、图表以及 Shortcodes 元素以增强您的内容。目录、面包屑、分页、侧边栏导航等都会自动生成。 多语言和 SEO 支持 - Hugo 的多语言模式轻松支持多语言网站。对于 SEO 标签、Open Graph 和 Twitter 卡片，也提供了开箱即用的支持。 ","接下来#接下来":"直接进入以下部分开始：\n入门指南学习如何使用 Hextra 创建网站 ","有问题或反馈#有问题或反馈？":" ❓ Hextra 仍在积极开发中。 有问题或反馈？请随时提出问题！ "},"title":"文档"},"/docs/advanced/":{"data":{"":"此部分提供了 Hextra 的一些高级配置。\n多语言 定制化 "},"title":"高级配置"},"/docs/advanced/comments/":{"data":{"":"Hextra 支持在你的网站中添加评论系统。 目前已经支持 giscus.","giscus#giscus":"giscus 是由 GitHub Discussions驱动的评论系统。Giscus 免费并且开源。\n如需启用 Giscus, 你需要在配置文件中添加以下内容：\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003crepository\u003e repoId: \u003crepository ID\u003e category: \u003ccategory\u003e categoryId: \u003ccategory ID\u003e Giscus 配置可以参考 giscus.app，还可以在那里找到更多详细信息。\n可以在 front matter 中启用或禁用特定页面的评论：\ncontent/docs/about.md--- title: About comments: true --- "},"title":"Comments"},"/docs/advanced/customization/":{"data":{"":"Hextra 在 hugo.yaml 中提供了一些自定义选项来配置主题。 本页介绍了可用选项以及如何进一步自定义主题。","自定义-css#自定义 CSS":"要添加自定义 CSS，我们需要在站点中创建一个文件 assets/css/custom.css。Hextra 将自动加载该文件，比如自定义字体：\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } 主题色 主题色可以通过设置 --primary-hue 变量来自定义：\nassets/css/custom.css:root { --primary-hue: 100deg; } 代码高亮 代码高亮风格的详细信息可在 Chroma Styles Gallery 中找到。可以使用以下命令生成样式表：\nhugo gen chromastyles --style=github 可将生成的样式添加到自定义 CSS 文件中以覆盖默认代码高亮样式。","自定义-script#自定义 Script":"你可以添加以下文件以自定义 script 添加到每页的 head 最后：\nlayouts/partials/custom/head-end.html ","自定义布局#自定义布局":"可以在站点的 layouts 目录中创建同名文件来覆盖主题的默认布局。 例如，要覆盖文档的 single.html 布局，在站点中创建文件 layouts/docs/single.html。\n如需或许更多信息，转至 Hugo Templates。","进一步定制-hextra#进一步定制 Hextra":"没有找到你想修改的内容？在 GitHub 上创建 Discussion 或为 Hextra 贡献你的智慧！"},"title":"自定义"},"/docs/advanced/multi-language/":{"data":{"":"Hextra 支持使用 Hugo 的多语言模式 创建多语言的网站。","启用多语言支持#启用多语言支持":"为了使我们的网站支持多语言，我们需要告诉 Hugo 需要支持的语言。 在站点配置文件中添加：\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 ja: languageName: 日本語 weight: 3 ","按文件名管理翻译#按文件名管理翻译":"Hugo 支持按文件名管理翻译。例如，如果我们有一个英文文件 content/docs/_index.md，我们可以创建一个翻译为法语的文件 content/docs/_index.fr.md。\ncontent docs _index.md _index.fr.md _index.ja.md 注意：Hugo 还支持按内容目录管理翻译。","更多参考#更多参考":" Hugo Multilingual Mode Hugo Multilingual Part 1: Content translation Hugo Multilingual Part 2: Strings localization ","翻译字符串#翻译字符串":"要翻译其他地方的字符串，我们需要将翻译添加到相应的 i18n 文件中：\ni18n/fr.yamlreadMore: Lire la suite ","翻译菜单项#翻译菜单项":"要翻译导航栏中的菜单项，我们需要设置 identifier 字段：\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 "},"title":"多语言"},"/docs/getting-started/":{"data":{"":"","作为新项目开始#作为新项目开始":"前提条件 在开始之前，请确保我们已经安装了 Hugo。 请参考 Hugo 的官方安装指南以获取更多详情。\nHugo 模块是管理 Hugo 主题的推荐方式。要使用 Hugo 模块，我们需要安装 Git 和 Go。\n初始化 Hugo 站点 hugo new site my-site --format=yaml 通过 Hugo Module 安装 # 初始化 Hugo 模块 cd my-site hugo mod init github.com/username/my-site # 添加 Hextra hugo mod get github.com/imfing/hextra 编辑 hugo.yaml 以启用 Hextra：\nmodule: imports: - path: github.com/imfing/hextra 通过 Git Submodule 安装 先决条件 在我们开始之前，你必须先确保以下软件已经安装：\nHugo (extended version) Git 步骤 初始化 Hugo 站点 hugo new site my-site --format=yaml 将 Hextra 添加为 Git Submodule git submodule add https://github.com/imfing/hextra.git themes/hextra 添加以下内容来配置 hugo.yaml 以使用 Hextra：\ntheme: hextra 创建你的第一个内容页 让我们为主页和文档页面创建一个新的内容页面：\nhugo new content/_index.md hugo new content/docs/_index.md 在本地预览站点 hugo server --buildDrafts --disableFastRender 瞧！你现在可以在 http://localhost:1313/ 看到你的新站点。\n使用 CI/CD 进行部署时，必须确保在运行 hugo 命令之前执行以下命令。\ngit submodule update --init 如果不运行此命令，theme 中将不会存在 Hextra 文件，进而导致构建失败。\n如何更新主题？ 如需把项目中所有的 Hugo Modules 都升级到最新，在终端中运行此命令：\nhugo mod get -u 如需把 Hextra 升级到最新的发行版本, 在终端中运行此命令：\nhugo mod get -u github.com/imfing/hextra 如果你需要获得更多信息，参见 Hugo Modules.","使用模板快速开始#使用模板快速开始":" imfing/hextra-starter-template\n通过使用上面的模板仓库，您将能够快速地开始。\n我们提供了一个 GitHub Actions 工作流，它可以帮助您自动构建并部署您的网站到 GitHub Pages，并免费托管。\n🌐 演示 ↗","接下来#接下来":"探索这些文档以便添加更多内容：\nOrganize Files Configuration Markdown "},"title":"快速开始"},"/docs/guide/":{"data":{"":"探索以下各站点以学习如何使用 PTLSP 提供的服务：\n目录结构 配置 Markdown 代码高亮 LaTeX 公式 图表 短代码 "},"title":"指南"},"/docs/guide/chevereto/":{"data":{"":"","ptlsp-image#PTLSP-IMAGE":"PTLSP-IMAGE PTLSPのIMAGE由Chevereto强力驱动 PTLSPのIMAGE截止2024站点托管数据 ","优点#优点":" 免费：图床托管完全免费，用户可以上传和分享原图、 缩略、中等缩略图片，而不需要支付任何费用\n开放：图床永不开启防盗链，让用户更放心地分享调用图片，而不需要担心链接突然失效或无法访问\n稳定：拥有稳定的服务器和世界第一的活菩萨CDN服务商，保证用户上传和访问图片的速度和质量\n分享：支持多种分享方式，包括链接分享、社交媒体分享、HTML嵌入等，让用户可以方便地分享图片\n多平台：提供API使PicoGo这样的开源图片上传工具：批量、快速的在多平台上使用，同时本站点提供苹果设备的快捷指令\n多语言：支持多种语言，包括英语、西班牙语、法语、德语、意大利语、葡萄牙语等，方便用户在全球范围内使用\n隐私保护：提供了隐私保护功能，用户从注册到上传图片都无法获取和记录您的真实IP，伪装记录的IP均由CDN服务商提供","教程#教程":"下载和安装Chevereto 从Chevereto的官方网站上下载最新版本的软件。 将Chevereto上传到您的服务器。 按照官方文档中的说明进行安装。 配置Chevereto 登录Chevereto的管理后台。 在后台中，您可以对软件进行配置，包括设置图片上传限制、水印、主题等。 开始使用Chevereto 一旦Chevereto安装和配置完成，您就可以开始使用它来上传、存储和分享图片了。 您可以通过Chevereto的界面来上传图片，处理图片，分享图片。 您还可以通过Chevereto的管理后台来管理您的图片，包括查看、编辑、删除等操作。 总之，Chevereto是一款非常实用和强大的图片托管和分享软件，可以为用户提供一个简单易用的平台来管理和分享图片。","简介#简介":"PTLSP-IMAGE是一款由Chevereto驱动，完全免费的图片托管和分享网站，它提供了一个功能强大且丰富的界面，让用户可以轻松地上传、存储和分享图片。"},"title":"强大的图像托管方案"},"/docs/guide/configuration/":{"data":{"":"Hugo 从 Hugo 网站根目录下的 hugo.yaml 读取配置。 在配置文件中，您可以配置站点的所有选项。 你可以在 exampleSite/hugo.yaml 中找到此站点的配置文件作为开始。","footer#Footer":"版权声明 如需修改网站页脚中显示的版权文本，您需要创建一个名为“i18n/en.yaml”的文件。 在此文件中，填写新的版权文本，像这样：\ni18n/en.yamlcopyright: \"© 2023 YOUR TEXT HERE\" 你可以在 GitHub 存储库中找到示例 i18n/en.yaml 文件。另外，你可以在版权文本中使用 Markdown 格式。","侧边栏#侧边栏":"主侧边栏 主侧边栏是自动从 content 目录结构生成的。 有关更多详细信息，转至 目录结构。\n额外链接 侧边栏的额外链接在配置文件的 menu.sidebar 部分中配置：\nhugo.yamlmenu: sidebar: - name: More params: type: separator weight: 1 - name: \"About\" pageRef: \"/about\" weight: 2 - name: \"Hugo Docs ↗\" url: \"https://gohugo.io/documentation/\" weight: 3 ","其他#其他":"Favicon 如需自定义 favicon，请将图标文件放在 static 文件夹下以覆盖 主题中的默认 favicon：\nstatic android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon-dark.svg favicon.ico favicon.svg site.webmanifest 在您的项目中包含 favicon.ico 和 favicon.svg 文件，以确保网站的网站图标正确显示。\n虽然 favicon.ico 通常适用于较旧的浏览器，但 favicon.svg 受到现代浏览器的支持，所以更现代的做法是添加 favicon-dark.svg 以便在黑暗模式下提供较好的体验体验。\n请随意使用 favicon.io 或 favycon 等工具来生成这些图标。\n颜色主题配置 使用theme设置来配置默认主题模式和切换按钮，允许访问者在浅色或深色模式之间切换。\nhugo.yamlparams: theme: # light | dark | system default: system displayToggle: true theme.default 的可选项：\nlight - 仅使用浅色模式 dark - 仅使用神色模式 system - 跟随系统 theme.displayToggle 控制显示用于更改主题的切换按钮。 当设置为“true”时，访问者可以在浅色或深色模式之间切换，覆盖默认设置。\n页宽 页面的宽度可以通过配置文件中的params.page.width参数来调整：\nhugo.yamlparams: page: # full (100%), wide (90rem), normal (1280px) width: wide 有三个可选项：full, wide, and normal. 默认的页宽模式是 normal.\n同样的，导航栏和 footer 的宽度也可通过 params.navbar.width 和 params.footer.width 调整。\n搜索 默认情况下启用由 FlexSearch 提供全文搜索。 要自定义搜索索引，请在配置文件中设置 params.search.flexsearch.index ：\nhugo.yamlparams: # Search search: enable: true type: flexsearch flexsearch: # index page by: content | summary | heading | title index: content flexsearch.index 的可选项：\ncontent - 全内容搜索 summary - 概述 Hugo Content Summaries heading - 一级和二级标题 title - 仅搜索标题 要从搜索索引中排除页面，更改 front matter 中的 excludeSearch: true:\ncontent/docs/guide/configuration.md--- title: Configuration excludeSearch: true --- Google Analytics 要启用 Google Analytics，设置 services.googleAnalytics.ID:\nhugo.yamlservices: googleAnalytics: ID: G-MEASUREMENT_ID ","右侧边栏#右侧边栏":"目录 目录是根据内容文件中的标题自动生成的，可以在 front matter 设置 toc：false 来禁用它。\ncontent/docs/guide/configuration.md--- title: Configuration toc: false --- 编辑此页链接 要配置编辑此页链接，我们可以在配置文件中设置 params.editURL.base：\nhugo.yamlparams: editURL: base: \"https://github.com/your-username/your-repo/edit/main\" 将为每个页面自动生成编辑链接。 如需为特定页面设置编辑链接，可以在页面的 front matter 中设置 editURL：\ncontent/docs/guide/configuration.md--- title: Configuration editURL: \"https://example.com/edit/this/page\" --- ","导航栏#导航栏":"菜单 右上角的菜单在配置文件的 menu.main 中配置：\nhugo.yamlmenu: main: - name: Documentation pageRef: /docs weight: 1 - name: Blog pageRef: /blog weight: 2 - name: About pageRef: /about weight: 3 - name: Search weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github 有几种不同类型的菜单项：\nLink to a page in the site with pageRef - name: Documentation pageRef: /docs Link to an external URL with url - name: GitHub url: \"https://github.com\" Search bar with type: search - name: Search params: type: search Icon - name: GitHub params: icon: github 这些菜单项可以通过设置 weight 进行排序。"},"title":"配置文件"},"/docs/guide/diagrams/":{"data":{"":"目前，Hextra 支持 Mermaid 的图表。","mermaid#Mermaid":"Mermaid 是一个基于 JavaScript 的图表绘制工具，它的文本定义和 Markdown 类似，可在浏览器中动态创建图表。例如：流程图、序列图、饼图等。\n在 Hextra 中使用 Mermaid 就像使用代码块一样简单：\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` 将呈现为：\ngraph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD;Sequence diagram：\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good!如需获取更多信息，转至 Mermaid Documentation。"},"title":"图表"},"/docs/guide/latex/":{"data":{"":"$\\KaTeX$ 用于呈现 LaTeX 数学表达式。可在 frontmatter 将 math 设置为 true 来启用。\nMarkdown--- title: \"My Page with LaTeX\" math: true --- 启用后，KaTeX 中的脚本，样式表和字体将自动包含在你的网站中。这样就可以在 Markdown 内容中使用 LaTeX 数学表达式。","化学表达式#化学表达式":"通过 mhchem 支持化学表达式。\n行内：$\\ce{H2O}$ 是水。\n独立段落：\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$ $$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$","支持的功能#支持的功能":"有关支持的符号列表，转至 KaTeX 支持的公式。","示例#示例":"Markdown 内容支持行内和独立段落的 LaTeX 数学表达式。\n行内 page.mdThis $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline. This $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline.\n独立段落 page.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$ 将被渲染为：\n$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} , dt$$"},"title":"LaTeX 公式"},"/docs/guide/markdown/":{"data":{"":"Hugo 支持 Markdown 来书写内容，创建列表等。本页将向你展示一些最常见的 Markdown 语法示例。","markdown-示例#Markdown 示例":"文本样式 Style Syntax Example Output Bold **bold text** **bold text** bold text Italic *italicized text* `italicized text italicized text Strikethrough ~~strikethrough text~~ ~~strikethrough text~~ strikethrough text Subscript \u003csub\u003e\u003c/sub\u003e This is a \u003csub\u003esubscript\u003c/sub\u003e text This is a subscript text Superscript \u003csup\u003e\u003c/sup\u003e This is a \u003csup\u003esuperscript\u003c/sup\u003e text This is a superscript text 引用 带角标的块引用：\nDon’t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n表格 表格并非核心 Markdown 规范，但 Hugo 支持开箱即用的表格：\nName Age Bob 27 Alice 23 Markdown 表格中的内联 Italics Bold Code italics bold code 代码块 Syntax Highlighting 列表 有序列表 First item Second item Third item 无序列表 List item Another item And another item 嵌套列表 Fruit Apple Orange Banana Dairy Milk Cheese 图片 带有标题：\nUnsplash Landscape The above quote is excerpted from Rob Pike’s talk during Gopherfest, November 18, 2015. ↩︎","参考资料#参考资料":" Markdown Guide Markdown Cheatsheet Markdown Tutorial Markdown Reference ","配置#配置":"Hugo 使用 Goldmark 解析 Markdown。 Markdown 渲染可以在 hugo.yaml 中的 markup.goldmark 中配置。以下是Hextra的默认配置：\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false 如需了解更多选项，转至 Configure Markup。"},"title":"Markdown"},"/docs/guide/shortcodes/":{"data":{"":"Hugo 短代码 是你的内容文件中调用内置或自定义模板的简单片段。\nHextra 提供了一系列美观的短代码以增强你的内容。\n注意事项 卡片 文件树 图标 步骤 标签 "},"title":"短代码"},"/docs/guide/syntax-highlighting/":{"data":{"":"Hugo 使用 Chroma，一种纯 Golang 实现的代码高亮渲染器。 建议对 Markdown 内容中的代码块使用反引号，例如：\nMarkdown```python def say_hello(): print(\"Hello!\") ``` 将呈现为：\ndef say_hello(): print(\"Hello!\") ","支持的编程语言#支持的编程语言":"如需了解支持的编程语言，转至 Chroma’s documentation。","特性#特性":"文件名 要向代码块添加文件名或标题，请设置 filename：\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ``` hello.pydef say_hello(): print(\"Hello!\") 行号 如需设置行号，将 linenos 设置为 table，并将 linenostart 设置为起始行号：\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ``` 42 43 def say_hello(): print(\"Hello!\") 高亮行 显示高亮行，设置 hl_lines 为行号：\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ``` hello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello() 复制按钮 默认情况下，代码块复制按钮已自动启用。"},"title":"代码高亮"},"/showcase/":{"data":{"":" 由 Hextra 驱动的开源网站和项目。 Osuny Porter LutheranConfessions Hextra Starter Template "},"title":"项目展示"}}